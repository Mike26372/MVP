'use strict';

var Q = require('q');
var List = require('../schema/list.js');
var utility = require('../utility/utility-func.js');

var createListItem = Q.nbind(List.create, List);
var findListItems = Q.nbind(List.find, List);
var updateListItems = Q.nbind(List.update, List);
var removeListItems = Q.nbind(List.remove, List);

module.exports = {
  addToList: function addToList(req, res, next) {

    var newListItem = {
      userId: req.body.userId,
      user: req.body.user,
      task: req.body.task,
      completed: false
    };

    createListItem(newListItem).then(function (data) {
      console.log('New list item saved!');
      return res.status(201).json(data);
    }).fail(function (err) {
      console.error('List item could not be saved, try again noob');
      console.error(err);
      return res.status(404).end();
    });
  },

  getAllTodos: function getAllTodos(req, res, next) {

    findListItems({}).then(function (listItems) {
      // return listItems.reverse();
      return listItems.sort(utility.sortByCompleteComparator);
    }).then(function (listItems) {
      return res.status(200).json(listItems);
    }).catch(function (error) {
      console.error('List items could not be retrieved');
      return res.status(404).end();
    });
  },

  toggleCompletion: function toggleCompletion(req, res, next) {

    // console.log(req.body._id);
    // console.log(req.body.completed);

    updateListItems({ _id: req.body._id }, { completed: req.body.completed }, {}).then(function (listItem) {
      console.log('List item updated');
      return res.status(202).end();
    }).catch(function (err) {
      console.log('List item update failed');
      return res.status(404).end();
    });
  },

  deleteTodos: function deleteTodos(req, res, next) {
    removeListItems({ _id: req.body._id }).then(function () {
      console.log('Item removed');
      return res.status(200).end();
    }).catch(function (err) {
      console.error('Item could not be removed');
      return res.status(404).end();
    });
  }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2NvbnRyb2xsZXJzL2xpc3RDb250cm9sbGVyLmpzIl0sIm5hbWVzIjpbIlEiLCJyZXF1aXJlIiwiTGlzdCIsInV0aWxpdHkiLCJjcmVhdGVMaXN0SXRlbSIsIm5iaW5kIiwiY3JlYXRlIiwiZmluZExpc3RJdGVtcyIsImZpbmQiLCJ1cGRhdGVMaXN0SXRlbXMiLCJ1cGRhdGUiLCJyZW1vdmVMaXN0SXRlbXMiLCJyZW1vdmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiYWRkVG9MaXN0IiwicmVxIiwicmVzIiwibmV4dCIsIm5ld0xpc3RJdGVtIiwidXNlcklkIiwiYm9keSIsInVzZXIiLCJ0YXNrIiwiY29tcGxldGVkIiwidGhlbiIsImRhdGEiLCJjb25zb2xlIiwibG9nIiwic3RhdHVzIiwianNvbiIsImZhaWwiLCJlcnIiLCJlcnJvciIsImVuZCIsImdldEFsbFRvZG9zIiwibGlzdEl0ZW1zIiwic29ydCIsInNvcnRCeUNvbXBsZXRlQ29tcGFyYXRvciIsImNhdGNoIiwidG9nZ2xlQ29tcGxldGlvbiIsIl9pZCIsImxpc3RJdGVtIiwiZGVsZXRlVG9kb3MiXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBSUEsSUFBSUMsUUFBUSxHQUFSLENBQVI7QUFDQSxJQUFJQyxPQUFPRCxRQUFRLG1CQUFSLENBQVg7QUFDQSxJQUFJRSxVQUFVRixRQUFRLDRCQUFSLENBQWQ7O0FBRUEsSUFBSUcsaUJBQWlCSixFQUFFSyxLQUFGLENBQVFILEtBQUtJLE1BQWIsRUFBcUJKLElBQXJCLENBQXJCO0FBQ0EsSUFBSUssZ0JBQWdCUCxFQUFFSyxLQUFGLENBQVFILEtBQUtNLElBQWIsRUFBbUJOLElBQW5CLENBQXBCO0FBQ0EsSUFBSU8sa0JBQWtCVCxFQUFFSyxLQUFGLENBQVFILEtBQUtRLE1BQWIsRUFBcUJSLElBQXJCLENBQXRCO0FBQ0EsSUFBSVMsa0JBQWtCWCxFQUFFSyxLQUFGLENBQVFILEtBQUtVLE1BQWIsRUFBcUJWLElBQXJCLENBQXRCOztBQUVBVyxPQUFP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J3EnKTtcbnZhciBMaXN0ID0gcmVxdWlyZSgnLi4vc2NoZW1hL2xpc3QuanMnKTtcbnZhciB1dGlsaXR5ID0gcmVxdWlyZSgnLi4vdXRpbGl0eS91dGlsaXR5LWZ1bmMuanMnKTtcblxudmFyIGNyZWF0ZUxpc3RJdGVtID0gUS5uYmluZChMaXN0LmNyZWF0ZSwgTGlzdCk7XG52YXIgZmluZExpc3RJdGVtcyA9IFEubmJpbmQoTGlzdC5maW5kLCBMaXN0KTtcbnZhciB1cGRhdGVMaXN0SXRlbXMgPSBRLm5iaW5kKExpc3QudXBkYXRlLCBMaXN0KTtcbnZhciByZW1vdmVMaXN0SXRlbXMgPSBRLm5iaW5kKExpc3QucmVtb3ZlLCBMaXN0KTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGFkZFRvTGlzdDogZnVuY3Rpb24ocmVxLCByZXMsIG5leHQpIHtcbiAgICBcbiAgICBjb25zdCBuZXdMaXN0SXRlbSA9IHtcbiAgICAgIHVzZXJJZDogcmVxLmJvZHkudXNlcklkLFxuICAgICAgdXNlcjogcmVxLmJvZHkudXNlcixcbiAgICAgIHRhc2s6IHJlcS5ib2R5LnRhc2ssXG4gICAgICBjb21wbGV0ZWQ6IGZhbHNlXG4gICAgfTtcblxuICAgIGNyZWF0ZUxpc3RJdGVtKG5ld0xpc3RJdGVtKVxuICAgIC50aGVuKChkYXRhKSA9PiB7XG4gICAgICBjb25zb2xlLmxvZygnTmV3IGxpc3QgaXRlbSBzYXZlZCEnKTtcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDIwMSkuanNvbihkYXRhKTtcbiAgICB9KVxuICAgIC5mYWlsKChlcnIpID0+IHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0xpc3QgaXRlbSBjb3VsZCBub3QgYmUgc2F2ZWQsIHRyeSBhZ2FpbiBub29iJyk7XG4gICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDQpLmVuZCgpOyAgXG4gICAgfSk7XG4gIH0sXG5cbiAgZ2V0QWxsVG9kb3M6IGZ1bmN0aW9uKHJlcSwgcmVzLCBuZXh0KSB7XG4gICAgXG4gICAgZmluZExpc3RJdGVtcyh7fSlcbiAgICAudGhlbigobGlzdEl0ZW1zKSA9PiB7XG4gICAgICAvLyByZXR1cm4gbGlzdEl0ZW1zLnJldmVyc2UoKTtcbiAgICAgIHJldHVybiBsaXN0SXRlbXMuc29ydCh1dGlsaXR5LnNvcnRCeUNvbXBsZXRlQ29tcGFyYXRvcik7XG4gICAgfSlcbiAgICAudGhlbigobGlzdEl0ZW1zKSA9PiB7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cygyMDApLmpzb24obGlzdEl0ZW1zKTtcbiAgICB9KVxuICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0xpc3QgaXRlbXMgY291bGQgbm90IGJlIHJldHJpZXZlZCcpO1xuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDA0KS5lbmQoKTtcbiAgICB9KTtcbiAgfSxcblxuICB0b2dnbGVDb21wbGV0aW9uOiBmdW5jdGlvbihyZXEsIHJlcywgbmV4dCkge1xuICAgIFxuICAgIC8vIGNvbnNvbGUubG9nKHJlcS5ib2R5Ll9pZCk7XG4gICAgLy8gY29uc29sZS5sb2cocmVxLmJvZHkuY29tcGxldGVkKTtcbiAgICBcbiAgICB1cGRhdGVMaXN0SXRlbXMoe19pZDogcmVxLmJvZHkuX2lkfSwge2NvbXBsZXRlZDogcmVxLmJvZHkuY29tcGxldGVkfSwge30pXG4gICAgLnRoZW4oKGxpc3RJdGVtKSA9PiB7XG4gICAgICBjb25zb2xlLmxvZygnTGlzdCBpdGVtIHVwZGF0ZWQnKTtcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDIwMikuZW5kKCk7XG4gICAgfSlcbiAgICAuY2F0Y2goKGVycikgPT4ge1xuICAgICAgY29uc29sZS5sb2coJ0xpc3QgaXRlbSB1cGRhdGUgZmFpbGVkJyk7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDQpLmVuZCgpO1xuICAgIH0pXG4gIH0sXG5cbiAgZGVsZXRlVG9kb3M6IGZ1bmN0aW9uKHJlcSwgcmVzLCBuZXh0KSB7XG4gICAgcmVtb3ZlTGlzdEl0ZW1zKHtfaWQ6IHJlcS5ib2R5Ll9pZH0pXG4gICAgLnRoZW4oKCkgPT4ge1xuICAgICAgY29uc29sZS5sb2coJ0l0ZW0gcmVtb3ZlZCcpO1xuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoMjAwKS5lbmQoKTtcbiAgICB9KVxuICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICBjb25zb2xlLmVycm9yKCdJdGVtIGNvdWxkIG5vdCBiZSByZW1vdmVkJyk7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDQpLmVuZCgpO1xuICAgIH0pO1xuICB9XG59OyJdfQ==