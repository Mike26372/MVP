'use strict';

var Q = require('q');
var List = require('../schema/list.js');
var utility = require('../utility/utility-func.js');

var createListItem = Q.nbind(List.create, List);
var findListItems = Q.nbind(List.find, List);
var updateListItems = Q.nbind(List.update, List);
var removeListItems = Q.nbind(List.remove, List);

module.exports = {
  addToList: function addToList(req, res, next) {

    var newListItem = {
      userId: req.body.userId,
      user: req.body.user,
      task: req.body.task,
      completed: false
    };

    createListItem(newListItem).then(function (data) {
      console.log('New list item saved!');
      return res.status(201).json(data);
    }).fail(function (err) {
      console.error('List item could not be saved, try again noob');
      console.error(err);
      return res.status(404).end();
    });
  },

  getAllTodos: function getAllTodos(req, res, next) {

    findListItems({ completed: false }).then(function (listItems) {
      return listItems.reverse();
      // return listItems.sort(utility.sortByCompleteComparator);
    }).then(function (listItems) {
      return res.status(200).json(listItems);
    }).catch(function (error) {
      console.error('List items could not be retrieved');
      return res.status(404).end();
    });
  },

  toggleCompletion: function toggleCompletion(req, res, next) {

    updateListItems({ _id: req.body._id }, { completed: req.body.completed }, {}).then(function (listItem) {
      console.log('List item updated');
      return res.status(202).end();
    }).catch(function (err) {
      console.log('List item update failed');
      return res.status(404).end();
    });
  },

  deleteTodos: function deleteTodos(req, res, next) {
    removeListItems({ _id: req.body._id }).then(function () {
      console.log('Item removed');
      return res.status(200).end();
    }).catch(function (err) {
      console.error('Item could not be removed');
      return res.status(404).end();
    });
  },

  getCompleted: function getCompleted(req, res, next) {

    findListItems({ completed: true }).then(function (listItems) {
      return listItems.reverse();
      // return listItems.sort(utility.sortByCompleteComparator);
    }).then(function (listItems) {
      return res.status(200).json(listItems);
    }).catch(function (error) {
      console.error('List items could not be retrieved');
      return res.status(404).end();
    });
  }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2NvbnRyb2xsZXJzL2xpc3RDb250cm9sbGVyLmpzIl0sIm5hbWVzIjpbIlEiLCJyZXF1aXJlIiwiTGlzdCIsInV0aWxpdHkiLCJjcmVhdGVMaXN0SXRlbSIsIm5iaW5kIiwiY3JlYXRlIiwiZmluZExpc3RJdGVtcyIsImZpbmQiLCJ1cGRhdGVMaXN0SXRlbXMiLCJ1cGRhdGUiLCJyZW1vdmVMaXN0SXRlbXMiLCJyZW1vdmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiYWRkVG9MaXN0IiwicmVxIiwicmVzIiwibmV4dCIsIm5ld0xpc3RJdGVtIiwidXNlcklkIiwiYm9keSIsInVzZXIiLCJ0YXNrIiwiY29tcGxldGVkIiwidGhlbiIsImRhdGEiLCJjb25zb2xlIiwibG9nIiwic3RhdHVzIiwianNvbiIsImZhaWwiLCJlcnIiLCJlcnJvciIsImVuZCIsImdldEFsbFRvZG9zIiwibGlzdEl0ZW1zIiwicmV2ZXJzZSIsImNhdGNoIiwidG9nZ2xlQ29tcGxldGlvbiIsIl9pZCIsImxpc3RJdGVtIiwiZGVsZXRlVG9kb3MiLCJnZXRDb21wbGV0ZWQiXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBSUEsSUFBSUMsUUFBUSxHQUFSLENBQVI7QUFDQSxJQUFJQyxPQUFPRCxRQUFRLG1CQUFSLENBQVg7QUFDQSxJQUFJRSxVQUFVRixRQUFRLDRCQUFSLENBQWQ7O0FBRUEsSUFBSUcsaUJBQWlCSixFQUFFSyxLQUFGLENBQVFILEtBQUtJLE1BQWIsRUFBcUJKLElBQXJCLENBQXJCO0FBQ0EsSUFBSUssZ0JBQWdCUCxFQUFFSyxLQUFGLENBQVFILEtBQUtNLElBQWIsRUFBbUJOLElBQW5CLENBQXBCO0FBQ0EsSUFBSU8sa0JBQWtCVCxFQUFFSyxLQUFGLENBQVFILEtBQUtRLE1BQWIsRUFBcUJSLElBQXJCLENBQXRCO0FBQ0EsSUFBSVMsa0JBQWtCWCxFQUFFSyxLQUFGLENBQVFILEtBQUtVLE1BQWIsRUFBcUJWLElBQXJCLENBQXRCOztBQUVBVyxPQUFPQyxPQUFQLEdB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Q0NDLElBREQsQ0FDTSxVQUFDVyxTQUFELEVBQWU7QUFDbkIsYUFBT0EsVUFBVUMsT0FBVixFQUFQO0FBQ0E7QUFDRCxLQUpELEVBS0NaLElBTEQsQ0FLTSxVQUFDVyxTQUFELEVBQWU7QUFDbkIsYUFBT25CLElBQUlZLE1BQUosQ0FBVyxHQUFYLEVBQWdCQyxJQUFoQixDQUFxQk0sU0FBckIsQ0FBUDtBQUNELEtBUEQsRUFRQ0UsS0FSRCxDQVFPLFVBQUNMLEtBQUQsRUFBVztBQUNoQk4sY0FBUU0sS0FBUixDQUFjLG1DQUFkO0FBQ0EsYUFBT2hCLElBQUlZLE1BQUosQ0FBVyxHQUFYLEVBQWdCSyxHQUFoQixFQUFQO0FBQ0QsS0FYRDtBQVlEO0FBN0VjLENBQWpCIiwiZmlsZSI6Imxpc3RDb250cm9sbGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIFEgPSByZXF1aXJlKCdxJyk7XG52YXIgTGlzdCA9IHJlcXVpcmUoJy4uL3NjaGVtYS9saXN0LmpzJyk7XG52YXIgdXRpbGl0eSA9IHJlcXVpcmUoJy4uL3V0aWxpdHkvdXRpbGl0eS1mdW5jLmpzJyk7XG5cbnZhciBjcmVhdGVMaXN0SXRlbSA9IFEubmJpbmQoTGlzdC5jcmVhdGUsIExpc3QpO1xudmFyIGZpbmRMaXN0SXRlbXMgPSBRLm5iaW5kKExpc3QuZmluZCwgTGlzdCk7XG52YXIgdXBkYXRlTGlzdEl0ZW1zID0gUS5uYmluZChMaXN0LnVwZGF0ZSwgTGlzdCk7XG52YXIgcmVtb3ZlTGlzdEl0ZW1zID0gUS5uYmluZChMaXN0LnJlbW92ZSwgTGlzdCk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBhZGRUb0xpc3Q6IGZ1bmN0aW9uKHJlcSwgcmVzLCBuZXh0KSB7XG4gICAgXG4gICAgY29uc3QgbmV3TGlzdEl0ZW0gPSB7XG4gICAgICB1c2VySWQ6IHJlcS5ib2R5LnVzZXJJZCxcbiAgICAgIHVzZXI6IHJlcS5ib2R5LnVzZXIsXG4gICAgICB0YXNrOiByZXEuYm9keS50YXNrLFxuICAgICAgY29tcGxldGVkOiBmYWxzZVxuICAgIH07XG5cbiAgICBjcmVhdGVMaXN0SXRlbShuZXdMaXN0SXRlbSlcbiAgICAudGhlbigoZGF0YSkgPT4ge1xuICAgICAgY29uc29sZS5sb2coJ05ldyBsaXN0IGl0ZW0gc2F2ZWQhJyk7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cygyMDEpLmpzb24oZGF0YSk7XG4gICAgfSlcbiAgICAuZmFpbCgoZXJyKSA9PiB7XG4gICAgICBjb25zb2xlLmVycm9yKCdMaXN0IGl0ZW0gY291bGQgbm90IGJlIHNhdmVkLCB0cnkgYWdhaW4gbm9vYicpO1xuICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDA0KS5lbmQoKTsgIFxuICAgIH0pO1xuICB9LFxuXG4gIGdldEFsbFRvZG9zOiBmdW5jdGlvbihyZXEsIHJlcywgbmV4dCkge1xuICAgIFxuICAgIGZpbmRMaXN0SXRlbXMoe2NvbXBsZXRlZDogZmFsc2V9KVxuICAgIC50aGVuKChsaXN0SXRlbXMpID0+IHtcbiAgICAgIHJldHVybiBsaXN0SXRlbXMucmV2ZXJzZSgpO1xuICAgICAgLy8gcmV0dXJuIGxpc3RJdGVtcy5zb3J0KHV0aWxpdHkuc29ydEJ5Q29tcGxldGVDb21wYXJhdG9yKTtcbiAgICB9KVxuICAgIC50aGVuKChsaXN0SXRlbXMpID0+IHtcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDIwMCkuanNvbihsaXN0SXRlbXMpO1xuICAgIH0pXG4gICAgLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgY29uc29sZS5lcnJvcignTGlzdCBpdGVtcyBjb3VsZCBub3QgYmUgcmV0cmlldmVkJyk7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDQpLmVuZCgpO1xuICAgIH0pO1xuICB9LFxuXG4gIHRvZ2dsZUNvbXBsZXRpb246IGZ1bmN0aW9uKHJlcSwgcmVzLCBuZXh0KSB7XG4gICAgXG4gICAgdXBkYXRlTGlzdEl0ZW1zKHtfaWQ6IHJlcS5ib2R5Ll9pZH0sIHtjb21wbGV0ZWQ6IHJlcS5ib2R5LmNvbXBsZXRlZH0sIHt9KVxuICAgIC50aGVuKChsaXN0SXRlbSkgPT4ge1xuICAgICAgY29uc29sZS5sb2coJ0xpc3QgaXRlbSB1cGRhdGVkJyk7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cygyMDIpLmVuZCgpO1xuICAgIH0pXG4gICAgLmNhdGNoKChlcnIpID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKCdMaXN0IGl0ZW0gdXBkYXRlIGZhaWxlZCcpO1xuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDA0KS5lbmQoKTtcbiAgICB9KTtcbiAgfSxcblxuICBkZWxldGVUb2RvczogZnVuY3Rpb24ocmVxLCByZXMsIG5leHQpIHtcbiAgICByZW1vdmVMaXN0SXRlbXMoe19pZDogcmVxLmJvZHkuX2lkfSlcbiAgICAudGhlbigoKSA9PiB7XG4gICAgICBjb25zb2xlLmxvZygnSXRlbSByZW1vdmVkJyk7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cygyMDApLmVuZCgpO1xuICAgIH0pXG4gICAgLmNhdGNoKChlcnIpID0+IHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0l0ZW0gY291bGQgbm90IGJlIHJlbW92ZWQnKTtcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwNCkuZW5kKCk7XG4gICAgfSk7XG4gIH0sXG5cbiAgZ2V0Q29tcGxldGVkOiBmdW5jdGlvbihyZXEsIHJlcywgbmV4dCkge1xuICAgIFxuICAgIGZpbmRMaXN0SXRlbXMoe2NvbXBsZXRlZDogdHJ1ZX0pXG4gICAgLnRoZW4oKGxpc3RJdGVtcykgPT4ge1xuICAgICAgcmV0dXJuIGxpc3RJdGVtcy5yZXZlcnNlKCk7XG4gICAgICAvLyByZXR1cm4gbGlzdEl0ZW1zLnNvcnQodXRpbGl0eS5zb3J0QnlDb21wbGV0ZUNvbXBhcmF0b3IpO1xuICAgIH0pXG4gICAgLnRoZW4oKGxpc3RJdGVtcykgPT4ge1xuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoMjAwKS5qc29uKGxpc3RJdGVtcyk7XG4gICAgfSlcbiAgICAuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICBjb25zb2xlLmVycm9yKCdMaXN0IGl0ZW1zIGNvdWxkIG5vdCBiZSByZXRyaWV2ZWQnKTtcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwNCkuZW5kKCk7XG4gICAgfSk7XG4gIH1cbn07Il19