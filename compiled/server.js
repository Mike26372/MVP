'use strict';

// Set up server
var express = require('express');
var app = express();
var port = 3000;

// Require middleware
var bodyParser = require('body-parser');
var cors = require('cors');
var session = require('express-session');
var path = require('path');
var morgan = require('morgan');

//Connect to database
var mongoose = require('mongoose');
var connection = mongoose.connect('mongodb://localhost/dreamcatcher');
var autoIncrement = require('mongoose-auto-increment');
autoIncrement.initialize(connection);

// Set session variables
var sessionVars = {
  secret: 'nyancat',
  cookies: {},
  resave: false,
  saveUninitialized: true
};

// Pass middleware into express
app.use(morgan('dev')); // Log messages for development
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));
app.use(cors()); // Sets headers
app.use(session(sessionVars)); // Easy session authentication

app.use('/compiled', express.static(path.join(__dirname + '/compiled')));
app.use('/node_modules', express.static(path.join(__dirname + '/node_modules')));
app.use(express.static(path.join(__dirname + '/public')));

// Handle post submission to database
require('./utility/routes.js')(app, express);

// Listen on port 3000
app.listen(port, function (err) {
  console.log('Listening on port ' + port);
});

module.exports = app;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NlcnZlci5qcyJdLCJuYW1lcyI6WyJleHByZXNzIiwicmVxdWlyZSIsImFwcCIsInBvcnQiLCJib2R5UGFyc2VyIiwiY29ycyIsInNlc3Npb24iLCJwYXRoIiwibW9yZ2FuIiwibW9uZ29vc2UiLCJjb25uZWN0aW9uIiwiY29ubmVjdCIsImF1dG9JbmNyZW1lbnQiLCJpbml0aWFsaXplIiwic2Vzc2lvblZhcnMiLCJzZWNyZXQiLCJjb29raWVzIiwicmVzYXZlIiwic2F2ZVVuaW5pdGlhbGl6ZWQiLCJ1c2UiLCJqc29uIiwidXJsZW5jb2RlZCIsImV4dGVuZGVkIiwic3RhdGljIiwiam9pbiIsIl9fZGlybmFtZSIsImxpc3RlbiIsImVyciIsImNvbnNvbGUiLCJsb2ciLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0EsSUFBSUEsVUFBVUMsUUFBUSxTQUFSLENBQWQ7QUFDQSxJQUFJQyxNQUFNRixTQUFWO0FBQ0EsSUFBSUcsT0FBTyxJQUFYOztBQUVBO0FBQ0EsSUFBSUMsYUFBYUgsUUFBUSxhQUFSLENBQWpCO0FBQ0EsSUFBSUksT0FBT0osUUFBUSxNQUFSLENBQVg7QUFDQSxJQUFJSyxVQUFVTCxRQUFRLGlCQUFSLENBQWQ7QUFDQSxJQUFJTSxPQUFPTixRQUFRLE1BQVIsQ0FBWDtBQUNBLElBQUlPLFNBQVNQLFFBQVEsUUFBUixDQUFiOztBQUVBO0FBQ0EsSUFBSVEsV0FBV1IsUUFBUSxVQUFSLENBQWY7QUFDQSxJQUFJUyxhQUFhRCxTQUFTRSxPQUFULENBQWlCLGtDQUFqQixDQUFqQjtBQUNBLElBQUlDLGdCQUFnQlgsUUFBUSx5QkFBUixDQUFwQjtBQUNBVyxjQUFjQyxVQUFkLENBQXlCSCxVQUF6Qjs7QUFFQTtBQUNBLElBQUlJLGNBQWM7QUFDaEJDLFVBQVEsU0FEUTtBQUVoQkMsV0FBUyxFQUZPO0FBR2hCQyxVQUFRLEtBSFE7QUFJaEJDLHFCQUFtQjtBQUpILENBQWxCOztBQU9BO0FBQ0FoQixJQUFJaUIsR0FBSixDQUFRWCxPQUFPLEtBQVAsQ0FBUixFLENBQXdCO0FBQ3hCTixJQUFJaUIsR0FBSixDQUFRZixXQUFXZ0IsSUFBWCxFQUFSO0FBQ0FsQixJQUFJaUIsR0FBSixDQUFRZixXQUFXaUIsVUFBWCxDQUFzQixFQUFDQyxVQUFVLElBQVgsRUFBdEIsQ0FBUjtBQUNBcEIsSUFBSWlCLEdBQUosQ0FBUWQsTUFBUixFLENBQWlCO0FBQ2pCSCxJQUFJaUIsR0FBSixDQUFRYixRQUFRUSxXQUFSLENBQVIsRSxDQUErQjs7QUFFL0JaLElBQUlpQixHQUFKLENBQVEsV0FBUixFQUFxQm5CLFFBQVF1QixNQUFSLENBQWVoQixLQUFLaUIsSUFBTCxDQUFVQyxZQUFZLFdBQXRCLENBQWYsQ0FBckI7QUFDQXZCLElBQUlpQixHQUFKLENBQVEsZUFBUixFQUF5Qm5CLFFBQVF1QixNQUFSLENBQWVoQixLQUFLaUIsSUFBTCxDQUFVQyxZQUFZLGVBQXRCLENBQWYsQ0FBekI7QUFDQXZCLElBQUlpQixHQUFKLENBQVFuQixRQUFRdUIsTUFBUixDQUFlaEIsS0FBS2lCLElBQUwsQ0FBVUMsWUFBWSxTQUF0QixDQUFmLENBQVI7O0FBRUE7QUFDQXhCLFFBQVEscUJBQVIsRUFBK0JDLEdBQS9CLEVBQW9DRixPQUFwQzs7QUFFQTtBQUNBRSxJQUFJd0IsTUFBSixDQUFXdkIsSUFBWCxFQUFpQixVQUFTd0IsR0FBVCxFQUFjO0FBQzdCQyxVQUFRQyxHQUFSLHdCQUFpQzFCLElBQWpDO0FBQ0QsQ0FGRDs7QUFJQTJCLE9BQU9DLE9BQVAsR0FBaUI3QixHQUFqQiIsImZpbGUiOiJzZXJ2ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBTZXQgdXAgc2VydmVyXG52YXIgZXhwcmVzcyA9IHJlcXVpcmUoJ2V4cHJlc3MnKTtcbnZhciBhcHAgPSBleHByZXNzKCk7XG52YXIgcG9ydCA9IDMwMDA7XG5cbi8vIFJlcXVpcmUgbWlkZGxld2FyZVxudmFyIGJvZHlQYXJzZXIgPSByZXF1aXJlKCdib2R5LXBhcnNlcicpO1xudmFyIGNvcnMgPSByZXF1aXJlKCdjb3JzJyk7XG52YXIgc2Vzc2lvbiA9IHJlcXVpcmUoJ2V4cHJlc3Mtc2Vzc2lvbicpO1xudmFyIHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG52YXIgbW9yZ2FuID0gcmVxdWlyZSgnbW9yZ2FuJyk7XG5cbi8vQ29ubmVjdCB0byBkYXRhYmFzZVxudmFyIG1vbmdvb3NlID0gcmVxdWlyZSgnbW9uZ29vc2UnKTtcbnZhciBjb25uZWN0aW9uID0gbW9uZ29vc2UuY29ubmVjdCgnbW9uZ29kYjovL2xvY2FsaG9zdC9kcmVhbWNhdGNoZXInKTtcbnZhciBhdXRvSW5jcmVtZW50ID0gcmVxdWlyZSgnbW9uZ29vc2UtYXV0by1pbmNyZW1lbnQnKTtcbmF1dG9JbmNyZW1lbnQuaW5pdGlhbGl6ZShjb25uZWN0aW9uKTtcblxuLy8gU2V0IHNlc3Npb24gdmFyaWFibGVzXG52YXIgc2Vzc2lvblZhcnMgPSB7XG4gIHNlY3JldDogJ255YW5jYXQnLFxuICBjb29raWVzOiB7fSxcbiAgcmVzYXZlOiBmYWxzZSxcbiAgc2F2ZVVuaW5pdGlhbGl6ZWQ6IHRydWVcbn07XG5cbi8vIFBhc3MgbWlkZGxld2FyZSBpbnRvIGV4cHJlc3NcbmFwcC51c2UobW9yZ2FuKCdkZXYnKSk7IC8vIExvZyBtZXNzYWdlcyBmb3IgZGV2ZWxvcG1lbnRcbmFwcC51c2UoYm9keVBhcnNlci5qc29uKCkpO1xuYXBwLnVzZShib2R5UGFyc2VyLnVybGVuY29kZWQoe2V4dGVuZGVkOiB0cnVlfSkpO1xuYXBwLnVzZShjb3JzKCkpOyAvLyBTZXRzIGhlYWRlcnNcbmFwcC51c2Uoc2Vzc2lvbihzZXNzaW9uVmFycykpOyAvLyBFYXN5IHNlc3Npb24gYXV0aGVudGljYXRpb25cblxuYXBwLnVzZSgnL2NvbXBpbGVkJywgZXhwcmVzcy5zdGF0aWMocGF0aC5qb2luKF9fZGlybmFtZSArICcvY29tcGlsZWQnKSkpO1xuYXBwLnVzZSgnL25vZGVfbW9kdWxlcycsIGV4cHJlc3Muc3RhdGljKHBhdGguam9pbihfX2Rpcm5hbWUgKyAnL25vZGVfbW9kdWxlcycpKSk7XG5hcHAudXNlKGV4cHJlc3Muc3RhdGljKHBhdGguam9pbihfX2Rpcm5hbWUgKyAnL3B1YmxpYycpKSk7XG5cbi8vIEhhbmRsZSBwb3N0IHN1Ym1pc3Npb24gdG8gZGF0YWJhc2VcbnJlcXVpcmUoJy4vdXRpbGl0eS9yb3V0ZXMuanMnKShhcHAsIGV4cHJlc3MpO1xuXG4vLyBMaXN0ZW4gb24gcG9ydCAzMDAwXG5hcHAubGlzdGVuKHBvcnQsIGZ1bmN0aW9uKGVycikge1xuICBjb25zb2xlLmxvZyhgTGlzdGVuaW5nIG9uIHBvcnQgJHtwb3J0fWApO1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gYXBwO1xuIl19